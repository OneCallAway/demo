<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--mapper中的namespace等于mapper的接口地址-->
<mapper namespace="mapper.UserMapper">

    <!--定义sql片段-->
    <!--id：sql片段的唯一标识-->
    <!--基于单表来定义sql片段，这样sql片段的可重用性高-->
    <!--在sql片段中不要包含where-->
    
    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.age != null and userCustom.age != ''">
                AND student.age = #{userCustom.age}
            </if>
            <if test="userCustom.name != null and userCustom.name != ''">
                AND student.name like '%${userCustom.name}%'
            </if>
        </if>
--         使用foreach遍历传入ids
        <!-- 使用foreach遍历ids
                     collection:指定输入对象的集合属性
                     item:每个遍历生成对象中
                     open：开始遍历时拼接的串
                     close:技术遍历时拼接的串
                     separator:遍历的两个对象中需要拼接的串

                     拼接 AND (id = 1 or id = 10 or id = 16)
                  -->
        <foreach collection="ids" item="id" open="and(" close=")" separator="or">
--               每个遍历需要拼接的串
            id = #{id}
        </foreach>

--         实现"and id in(1,10,16)"拼接
        <!--<foreach collection="ids" item="id" open="and id in(" close=")" separator=",">-->
            <!--#{id}-->
        <!--</foreach>-->
    </sql>

    <!--定义rusultmap
    SELECT id id_,username username_ from student 和User类中的属性作为一个映射关系

    type：resultMap最终映射的java对象类型，可以使用别名

    id：对resultMap的唯一标识

    -->
    <resultMap id="User" type="userRusultMap">
        <!--id表示查询结果中的唯一标识
        column:查询出来的列名
        property:type指定的pojo类型中的属性名
        -->
    <id column="id_" property="id"/>
        <!--result:对普通名映射定义-->
        <!--column:查询出来的列名-->
        <!--property:type指定的pojo类型中的属性名-->
        <!--最终resultMap对column和property作一个映射对象（对应关系）-->
    <result column="username_" property="username"/>
    </resultMap>

    <!--使用resultMap进行输出映射
    resultMap:指定定义的resultMap的id，如果这个resultMap在其他的mapper文件，前边需要加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="<!--(namespace)-->userRusultMap">
        SELECT id id_,username username_ FROM  student WHERE id = #{VALUE}
    </select>
    <!--用户综合查询
    #{userCustom.age}：取出包装对象中的年龄值
    %${userCustom.name}%：取出包装对象中的用户名称
    -->
    <select id="findUserList" parameterType="entity.UserQueryVo" resultType="entity.UserCustom">
--         SELECT * FROM student WHERE student.id = #{} AND student.name LIKE '%${}%'
--         select * from student where student.age = #{userCustom.age} and student.name like '%${userCustom.name}%';
        SELECT * FROM student
--         where自动去掉条件中第一个and（如果条件成立）
        <!--<where>-->
            <!--<if test="userCustom != null">-->
                <!--<if test="userCustom.age != null and userCustom.age != ''">-->
                      <!--AND student.age = #{userCustom.age}-->
                <!--</if>-->
                <!--<if test="userCustom.name != null and userCustom.name != ''">-->
                      <!--AND student.name like '%${userCustom.name}%'-->
                <!--</if>-->
            <!--</if>-->
        <!--</where>-->

--     引用sql片段
        <where>
--             引用sql片段的id，如果refid指定的id不在本mapper中，需要在前面加namespace
            <include refid="<!--(namespace)-->query_user_where"></include>

--             在这里还可以引用其他sql片段
            <include refid=""></include>
            <include refid=""></include>
        </where>
    </select>

    <!--用户信息综合查询总数（resultType)
    使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，
    该列才可以映射成功
    如果列名和pojo属性名全部不一致，就没有创建pojo对象
    如果有一个一致，就会创建
    即：id 对应 id no id 对应 id_...（查询数据(数据库的列名)和pojo属性名对应)
    parameterType：指定输入类型和findUserList一样
    resultType：输出结果类型
    -->
    <select id="findUserCount"  parameterType="entity.UserQueryVo" resultType="int">
        select count(*) from student
        <where>
            <if test="userCustom != null">
                <if test="userCustom.age != null and userCustom.age != ''">
                    AND student.age = #{userCustom.age}
                </if>
                <if test="userCustom.name != null and userCustom.name != ''">
                    AND student.name like '%${userCustom.name}%'
                </if>
            </if>
        </where>
    </select>

    <!--
     跟据id查询
     将sql语句封装到mappedStatement对象中，将id称为statement的id
     parmeterType：指定输入类型
     #{}：表示占位符
     #{id}：id表示接收收入参数，参数名称为id，如果是简单类型，参数名可以任意
     resultType：指定sql输出结果的映射的对象java类型，select指定resultType表示将单挑记录映射成java对象
     -->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * from student WHERE id = #{id}
    </select>

    <!--根据用户名称模糊查询-->
    <!--${}:拼接sql串，将接收到的内容不加任何修饰拼接在sql中
     使用${}拼接sql，可能引起sql注入
     ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
     -->
    <select id="findUserByName" parameterType="String" resultType="entity.User">
        SELECT * FROM student WHERE NAME LIKE '%${value}%'
    </select>

    <!-- 添加用户 -->
    <insert id="insertUser" parameterType="entity.User">
        <!--
        将插入数据的主键返回
            SELECT LAST_insert_id():得到刚才insert进去的主键值，只适用与自增主键

            keyProperty:将查询到的主键值设置到parameterType指定的对象的属性
            order：相对于insert来说 select last_insert_id()的执行顺序

            resultType：指定select last_insert_id()的执行结果
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_insert_id();
        </selectKey>
        INSERT INTO student (name,birthday,age) VALUE (#{name},#{birthday},#{age})
    </insert>
    <!--
        使用mysql的uuid（）生成主键
        执行过程：
        通过uuid（）得到主键，将得到的主键设置到user的id属性中
        在insert执行时，从user对象中取出id属性
    -->
    <!--<selectKey keyProperty="id" order="BEFORE" resultType="string">-->
    <!--SELECT uuid();-->
    <!--</selectKey>-->
    <!--INSERT INTO student (id,name,birthday,age) VALUES (#{id},#{name},#{birthday},#{age})-->
    <!--</insert>-->


    <!--删除用户
    根据id删除用户
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM student WHERE id = #{id}
    </delete>

    <!--更新用户
    需要传入用户id
    需要传入用户的更新信息
    parameterType指定user对象，包括id和更新信息，id必须存在
    -->
    <update id="updateUser" parameterType="entity.User">
        UPDATE student set name = #{name},birthday=#{birthday},age=#{age} WHERE id = #{id}
    </update>
</mapper>